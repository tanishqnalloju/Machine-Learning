churndata=read.csv(file.choose())
str(churndata)
churndata1=churndata[-c(1,3,4)] # Negative Vector Indexing
# Delete columns State, Areacode, PhoneNumber
# NULL - The Average Customer Service Calls made by Customers Churn
# True is Equal to Customers Churn False
aggregate(churndata1$Number.Customer.Service.calls~churndata1$Churn,
          FUN=mean)
t.test(churndata1$Number.Customer.Service.calls~churndata1$Churn)
# There is no relationship between Customer Churn & Voicemail subscription
chisq.test(table(churndata1$Churn,churndata1$Voice.mail.Plan))

# Binary Logistic Regression#
churnlogit=glm(Churn~.,data=churndata1,family="binomial") # logistic model
summary(churnlogit) # Checking Summary of model
churnlogitpredict=predict(churnlogit,type="response") # Predicting
table(Actual=churndata1$Churn,Predict=churnlogitpredict>0.5) # Confusion Matrix
(4191+152)/(4191+102+555+152) # Accuracy -0.8686 = 86.86%

# Decision Tree # Package required "rpart"
churnrpart=rpart(Churn~.,data=churndata1)
summary(churnrpart)
plot(churnrpart)
text(churnrpart,cex=0.50)
rpart.plot(churnrpart) # pacakage required "rpart.plot"
churnrpartpredict=predict(churnrpart,type="class")
table(Actual=churndata1$Churn,Predict=churnrpartpredict)
(4233+512)/(4233+60+195+512) # Accuracy = 94.9%

# Random Forest (3000 trees) # package "randomForest"
churnrandomforest=randomForest(Churn~.,data=churndata1,
                               ntree=3000,do.trace=100)
print(churnrandomforest)
plot(churnrandomforest)

# Gradient Boosting Machine # package "gbm"
churndata2=churndata1
churndata2$Churn=ifelse(churndata2$Churn==" True.",1,0)
table(churndata2$Churn)
churngbm=gbm(Churn~.,data=churndata2,distribution="bernoulli",
               n.trees=3000,cv.folds=3)
bestiter=gbm.perf(churngbm,method="cv")
gbmpredict=predict(churngbm,churndata2,bestiter)
table(churndata2$Churn,gbmpredict>0.5)
(4282+28)/(4282+11+679+28) # Accuracy 86.2%

# Neural Networks - package "nnet"
churnnnet=nnet(Churn~.,data=churndata1,size=10,maxit=100)
summary(churnnnet)
churnnnetpredict=predict(churnnnet,type="class")
table(churndata1$Churn,churnnnetpredict)
